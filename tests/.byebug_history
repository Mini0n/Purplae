c
ap dkfm.errors
ap dkfm.get_playlists(9)
c
ap dkfm.get_playlists(9)
ap dkfm.get_playlists(10)
ap dkfm.get_playlists(5)
ap dkfm.get_playlists
ap dkfm.errors
ap dkfm.get_playlists('06l56')
ap dkfm.get_playlists(06l56)
ap dkfm.get_playlists(0656)
ap dkfm.get_playlists(0)
ap dkfm.errors
ap dkfm.get_playlists('')
ap dkfm.errors
c
ap dkfm.errors
ap dkfm.get_playlists('')
ap dkfm.get_playlists(0)
c
ap dkfm.get_playlists(0)
ap dkfm.get_playlists('')
ap dkfm.errors
c
xc
ap dkfm.errors
ap dkfm.get_playlists('')
c
ap dkfm.get_playlists('')
c
ap dkfm.get_playlists('')
c
ap dkfm.get_playlists('')
ap dkfm.errors
c
ap dkfm.errors
ap dkfm.get_playlists('')
ap dkfm.get_playlists(dkfjkdf)
ap dkfm.get_playlists(0x8)
ap dkfm.get_playlists(0x89)
ap dkfm.get_playlists()
ap dkfm.get_playlists(9)
ap dkfm.get_playlists(10)
ap dkfm.get_playlists(-1)
ap dkfm.errors
ap dkfm.get_playlists('stuff')
c
ap dkfm.get_playlists('stuff')
c
ap dkfm.get_playlists('stuff')
ap dkfm.get_playlists(-1)
ap dkfm.get_playlists(0)
ap dkfm.get_playlists(1)
ap dkfm.get_playlists
dkfm.get_playlists
c
dkfm.get_playlists(5)
dkfm.get_playlists
c
dkfm.get_playlists
get_playlists
c
get_playlist
c
ap playlists
c
ap playlists
playlists.class
lists.class
ap playlists
c
ap sorting.sort
ap sorting
sorting = playlists.map{|el| el[:date] }
ap playlists.map{|el| el[:date] }
ap playlists
c
ap playlists
c
"#{playlist_item.css('a')}"
"#{playlist_item.css('a').first['href']}"
c
"#{playlist_item.css('a').first['href']}"
c
"#{playlist_item.css('a').first['href']}"
c
"#{playlist_item.css('a').first['href']}"
c
"#{playlist_item.css('a').first['href']}"
c
"#{playlist_item.css('a').first['href']}"
c
"#{playlist_item.css('a').first['href']}"
"#{playlist_item.css('a').first}"
c
"#{playlist_item.css('a').first}"
ap playlists
c
playlists
c
n 1
conn.code
conn.class
c
ap dkfm.errors
dkfm.errors
c
ap playlists
playlists
dkfm.errors
dkfm
dkfm.errors
c
ap playlists
c
Time.now.year
Time.parse('30.11.2019')
ap playlists
playlists
playlist
c
ap dkfm.available_playlists
dkfm.available_playlists
c
test = html.css('li').first.css('a').first['href']
test = html.css('li').first.css('a').first
test = html.css('li').last.css('a').first
test
test = html.css('li').last.css('a')
test = html.css('li').last
test.css('a')
test.css('href')
test.css('[href]')
test.child(0)
test.first
test.text.split(' ')
test.text
test.class
test
l =
DAYS.index('asas').nil?
DAYS.index('asas')
DAYS[DAYS.index('Tue') + 1]
Dats[DAYS.index('Tue') + 1]
DAYS.index('Tue')
DAYS
  DAYS = %w(Mon Monday Tue Tuesday Wed Wednesday Thu Thursday Fri Friday Sat Saturday Sun Sunday)
days.select{|d| d.include?(day) }.first
days.select{|d| d.include?(day) }
days.select{|d| d.includes?(day) }
day = 'Sat'
days = %w(Monday Tuesday Wednesday Thrusday Friday Saturday Sunday)
days = %(Monday Tuesday Wednesday Thrusday Friday Saturday Sunday)
I18n.t('date.abbr_day_names')
test.text.split(' ')
test.text
test.css('text()').strip
test.css('text()')
pp test.css('text()')
pp test.css('text')
pp test[0]
pp test
test.children.length
test = html.css('li').first
test = html.css('li')
test = html.css('li').length
test = html.css('li > a').length
test['href']
pp test
test = html.css('li > a').first
test.css('text()').last.text.strip
test.css('text()').last.text
test.css('text()').first.text
test.css('text()')
pp test
test.class
test = html.css('li').first
test = html.css('li').fiorst
test.class
test
test = html.css('li').map{|l| l }
html.css('li').map{|l| l.text }
html.css('li').first
html.css('li').length
html.class
c
l =
conn
@conn
@conn.body
dkfm.conn
c
@conn.request.path.to_s
@conn.request.uri.to_s
@conn.request.base_uri
@conn.request.uri
ap (@conn.request.methods - Object.methods).sort
@conn.request
@conn.response.path
@conn.path
@conn.chunked?
@conn.chuncked?
@conn.code_type
@conn.error_type
@conn.value
@conn.uri
@conn.msg
@conn.to_hash
@conn.get_fields
@conn.message
ap (@conn.response.methods - Object.methods).sort
(@conn.response.methods - Object.methods).sort
@conn.response.code
@conn.response.type
@conn.response
@conn.response.header
@conn.response.headers
@conn.response
@conn.response.to_s
@conn.request.path.to_s
@conn.request.path
@conn.request
@conn.headers
@conn.errors
@conn.error
@conn.values
@conn
@conn.error?
@conn.error
@conn.response.value
@conn.response.values
@conn.response
@conn.code
c
playlists.each{|list| ap list  }
playlist.each{|list| ap list  }
ap playlists[0]
playlists.length
c
playlists.length
playlist.length
ap playlists[6]
ap playlists[5]
playlists[5].length
ap playlists[5].length
ap playlists[4]
ap playlists[3]
ap playlists[2]
ap playlists[1]
ap playlists[0]
playlists[5].length
playlists[4].length
playlists[3].length
playlists[2].length
playlists[1].length
